
shopt -s extglob progcomp

_upvars()
{
    if ! (( $# )); then
        echo "bash_completion: $FUNCNAME: usage: $FUNCNAME" \
            "[-v varname value] | [-aN varname [value ...]] ..." >&2
        return 2
    fi
    while (( $# )); do
        case $1 in
            -a*)
                # Error checking
                [[ ${1#-a} ]] || { echo "bash_completion: $FUNCNAME:" \
                    "\`$1': missing number specifier" >&2; return 1; }
                printf %d "${1#-a}" &>/dev/null || { echo bash_completion: \
                    "$FUNCNAME: \`$1': invalid number specifier" >&2
                    return 1; }
                # Assign array of -aN elements
                [[ "$2" ]] && unset -v "$2" && eval $2=\(\"\${@:3:${1#-a}}\"\) &&
                shift $((${1#-a} + 2)) || { echo bash_completion: \
                    "$FUNCNAME: \`$1${2+ }$2': missing argument(s)" \
                    >&2; return 1; }
                ;;
            -v)
                # Assign single value
                [[ "$2" ]] && unset -v "$2" && eval $2=\"\$3\" &&
                shift 3 || { echo "bash_completion: $FUNCNAME: $1:" \
                    "missing argument(s)" >&2; return 1; }
                ;;
            *)
                echo "bash_completion: $FUNCNAME: $1: invalid option" >&2
                return 1 ;;
        esac
    done
}

__reassemble_comp_words_by_ref()
{
    local exclude i j line ref
    # Exclude word separator characters?
    if [[ $1 ]]; then
        # Yes, exclude word separator characters;
        # Exclude only those characters, which were really included
        exclude="${1//[^$COMP_WORDBREAKS]}"
    fi

    # Default to cword unchanged
    printf -v "$3" %s "$COMP_CWORD"
    # Are characters excluded which were former included?
    if [[ $exclude ]]; then
        # Yes, list of word completion separators has shrunk;
        line=$COMP_LINE
        # Re-assemble words to complete
        for (( i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++)); do
            # Is current word not word 0 (the command itself) and is word not
            # empty and is word made up of just word separator characters to
            # be excluded and is current word not preceded by whitespace in
            # original line?
            while [[ $i -gt 0 && ${COMP_WORDS[$i]} == +([$exclude]) ]]; do
                # Is word separator not preceded by whitespace in original line
                # and are we not going to append to word 0 (the command
                # itself), then append to current word.
                [[ $line != [[:blank:]]* ]] && (( j >= 2 )) && ((j--))
                # Append word separator to current or new word
                ref="$2[$j]"
                printf -v "$ref" %s "${!ref}${COMP_WORDS[i]}"
                # Indicate new cword
                [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j"
                # Remove optional whitespace + word separator from line copy
                line=${line#*"${COMP_WORDS[$i]}"}
                # Start new word if word separator in original line is
                # followed by whitespace.
                [[ $line == [[:blank:]]* ]] && ((j++))
                # Indicate next word if available, else end *both* while and
                # for loop
                (( $i < ${#COMP_WORDS[@]} - 1)) && ((i++)) || break 2
            done
            # Append word to current word
            ref="$2[$j]"
            printf -v "$ref" %s "${!ref}${COMP_WORDS[i]}"
            # Remove optional whitespace + word from line copy
            line=${line#*"${COMP_WORDS[i]}"}
            # Indicate new cword
            [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j"
        done
        [[ $i == $COMP_CWORD ]] && printf -v "$3" %s "$j"
    else
        # No, list of word completions separators hasn't changed;
        for i in "${!COMP_WORDS[@]}"; do
            printf -v "$2[i]" %s "${COMP_WORDS[i]}"
        done
    fi
}

__get_cword_at_cursor_by_ref()
{
    local cword words=()
    __reassemble_comp_words_by_ref "$1" words cword

    local i cur index=$COMP_POINT lead=${COMP_LINE:0:$COMP_POINT}
    # Cursor not at position 0 and not leaded by just space(s)?
    if [[ $index -gt 0 && ( $lead && ${lead//[[:space:]]} ) ]]; then
        cur=$COMP_LINE
        for (( i = 0; i <= cword; ++i )); do
            while [[
                # Current word fits in $cur?
                ${#cur} -ge ${#words[i]} &&
                # $cur doesn't match cword?
                "${cur:0:${#words[i]}}" != "${words[i]}"
            ]]; do
                # Strip first character
                cur="${cur:1}"
                # Decrease cursor position, staying >= 0
                [[ $index -gt 0 ]] && ((index--))
            done

            # Does found word match cword?
            if [[ $i -lt $cword ]]; then
                # No, cword lies further;
                local old_size=${#cur}
                cur="${cur#"${words[i]}"}"
                local new_size=${#cur}
                (( index -= old_size - new_size ))
            fi
        done
        # Clear $cur if just space(s)
        [[ $cur && ! ${cur//[[:space:]]} ]] && cur=
        # Zero $index if negative
        [[ $index -lt 0 ]] && index=0
    fi

    local "$2" "$3" "$4" && _upvars -a${#words[@]} $2 "${words[@]}" \
        -v $3 "$cword" -v $4 "${cur:0:$index}"
}

_get_comp_words_by_ref()
{
    local exclude flag i OPTIND=1
    local cur cword words=()
    local upargs=() upvars=() vcur vcword vprev vwords

    while getopts "c:i:n:p:w:" flag "$@"; do
        case $flag in
            c) vcur=$OPTARG ;;
            i) vcword=$OPTARG ;;
            n) exclude=$OPTARG ;;
            p) vprev=$OPTARG ;;
            w) vwords=$OPTARG ;;
        esac
    done
    while [[ $# -ge $OPTIND ]]; do
        case ${!OPTIND} in
            cur)   vcur=cur ;;
            prev)  vprev=prev ;;
            cword) vcword=cword ;;
            words) vwords=words ;;
            *) echo "bash_completion: $FUNCNAME: \`${!OPTIND}':" \
                "unknown argument" >&2; return 1 ;;
        esac
        (( OPTIND += 1 ))
    done

    __get_cword_at_cursor_by_ref "$exclude" words cword cur

    [[ $vcur   ]] && { upvars+=("$vcur"  ); upargs+=(-v $vcur   "$cur"  ); }
    [[ $vcword ]] && { upvars+=("$vcword"); upargs+=(-v $vcword "$cword"); }
    [[ $vprev && $cword -ge 1 ]] && { upvars+=("$vprev" ); upargs+=(-v $vprev
        "${words[cword - 1]}"); }
    [[ $vwords ]] && { upvars+=("$vwords"); upargs+=(-a${#words[@]} $vwords
        "${words[@]}"); }

    (( ${#upvars[@]} )) && local "${upvars[@]}" && _upvars "${upargs[@]}"
}

_get_cword()
{
    local LC_CTYPE=C
    local cword words
    __reassemble_comp_words_by_ref "$1" words cword

    # return previous word offset by $2
    if [[ ${2//[^0-9]/} ]]; then
        printf "%s" "${words[cword-$2]}"
    elif [[ "${#words[cword]}" -eq 0 || "$COMP_POINT" == "${#COMP_LINE}" ]]; then
        printf "%s" "${words[cword]}"
    else
        local i
        local cur="$COMP_LINE"
        local index="$COMP_POINT"
        for (( i = 0; i <= cword; ++i )); do
            while [[
                # Current word fits in $cur?
                "${#cur}" -ge ${#words[i]} &&
                # $cur doesn't match cword?
                "${cur:0:${#words[i]}}" != "${words[i]}"
            ]]; do
                # Strip first character
                cur="${cur:1}"
                # Decrease cursor position, staying >= 0
                [[ $index -gt 0 ]] && ((index--))
            done

            # Does found word matches cword?
            if [[ "$i" -lt "$cword" ]]; then
                # No, cword lies further;
                local old_size="${#cur}"
                cur="${cur#${words[i]}}"
                local new_size="${#cur}"
                (( index -= old_size - new_size ))
            fi
        done

        if [[ "${words[cword]:0:${#cur}}" != "$cur" ]]; then
            # We messed up! At least return the whole word so things
            # keep working
            printf "%s" "${words[cword]}"
        else
            printf "%s" "${cur:0:$index}"
        fi
    fi
}

_quote_readline_by_ref()
{
    if [ -z "$1" ]; then
        # avoid quoting if empty
        printf -v $2 %s "$1"
    elif [[ $1 == \'* ]]; then
        # Leave out first character
        printf -v $2 %s "${1:1}"
    elif [[ $1 == \~* ]]; then
        # avoid escaping first ~
        printf -v $2 \~%q "${1:1}"
    else
        printf -v $2 %q "$1"
    fi

    # If result becomes quoted like this: $'string', re-evaluate in order to
    # drop the additional quoting.  See also: http://www.mail-archive.com/
    # bash-completion-devel@lists.alioth.debian.org/msg01942.html
    [[ ${!2} == \$* ]] && eval $2=${!2}
}

_filedir()
{
    local IFS=$'\n'

    _tilde "$cur" || return

    local -a toks
    local x reset

    reset=$(shopt -po noglob); set -o noglob
    toks=( $(compgen -d -- "$cur") )
    IFS=' '; $reset; IFS=$'\n'

    if [[ "$1" != -d ]]; then
        local quoted
        _quote_readline_by_ref "$cur" quoted

        # Munge xspec to contain uppercase version too
        # http://thread.gmane.org/gmane.comp.shells.bash.bugs/15294/focus=15306
        local xspec=${1:+"!*.@($1|${1^^})"}
        reset=$(shopt -po noglob); set -o noglob
        toks+=( $(compgen -f -X "$xspec" -- $quoted) )
        IFS=' '; $reset; IFS=$'\n'

        # Try without filter if it failed to produce anything and configured to
        [[ -n ${COMP_FILEDIR_FALLBACK:-} && -n "$1" && ${#toks[@]} -lt 1 ]] && {
            reset=$(shopt -po noglob); set -o noglob
            toks+=( $(compgen -f -- $quoted) )
            IFS=' '; $reset; IFS=$'\n'
        }
    fi

    if [[ ${#toks[@]} -ne 0 ]]; then
        # 2>/dev/null for direct invocation, e.g. in the _filedir unit test
        compopt -o filenames 2>/dev/null
        COMPREPLY+=( "${toks[@]}" )
    fi
}


_variables()
{
    if [[ $cur =~ ^(\$(\{[!#]?)?)([A-Za-z0-9_]*)$ ]]; then
        # Completing $var / ${var / ${!var / ${#var
        if [[ $cur == \${* ]]; then
            local arrs vars
            vars=( $(compgen -A variable -P ${BASH_REMATCH[1]} -S '}' -- ${BASH_REMATCH[3]}) ) && \
            arrs=( $(compgen -A arrayvar -P ${BASH_REMATCH[1]} -S '[' -- ${BASH_REMATCH[3]}) )
            if [[ ${#vars[@]} -eq 1 && $arrs ]]; then
                # Complete ${arr with ${array[ if there is only one match, and that match is an array variable
                compopt -o nospace
                COMPREPLY+=( ${arrs[*]} )
            else
                # Complete ${var with ${variable}
                COMPREPLY+=( ${vars[*]} )
            fi
        else
            # Complete $var with $variable
            COMPREPLY+=( $(compgen -A variable -P '$' -- "${BASH_REMATCH[3]}") )
        fi
        return 0
    elif [[ $cur =~ ^(\$\{[#!]?)([A-Za-z0-9_]*)\[([^]]*)$ ]]; then
        # Complete ${array[i with ${array[idx]}
        local IFS=$'\n'
        COMPREPLY+=( $(compgen -W '$(printf %s\\n "${!'${BASH_REMATCH[2]}'[@]}")' \
            -P "${BASH_REMATCH[1]}${BASH_REMATCH[2]}[" -S ']}' -- "${BASH_REMATCH[3]}") )
        # Complete ${arr[@ and ${arr[*
        if [[ ${BASH_REMATCH[3]} == [@*] ]]; then
            COMPREPLY+=( "${BASH_REMATCH[1]}${BASH_REMATCH[2]}[${BASH_REMATCH[3]}]}" )
        fi
        __ltrim_colon_completions "$cur"    # array indexes may have colons
        return 0
    elif [[ $cur =~ ^\$\{[#!]?[A-Za-z0-9_]*\[.*\]$ ]]; then
        # Complete ${array[idx] with ${array[idx]}
        COMPREPLY+=( "$cur}" )
        __ltrim_colon_completions "$cur"
        return 0
    else
        case $prev in
            TZ)
                cur=/usr/share/zoneinfo/$cur
                _filedir
                for i in "${!COMPREPLY[@]}"; do
                    if [[ ${COMPREPLY[i]} == *.tab ]]; then
                        unset 'COMPREPLY[i]'
                        continue
                    elif [[ -d ${COMPREPLY[i]} ]]; then
                        COMPREPLY[i]+=/
                        compopt -o nospace
                    fi
                    COMPREPLY[i]=${COMPREPLY[i]#/usr/share/zoneinfo/}
                done
                return 0
                ;;
        esac
    fi
    return 1
}

_init_completion()
{
    local exclude="" flag outx errx inx OPTIND=1
    while getopts "n:e:o:i:s" flag "$@"; do
        case $flag in
            n) exclude+=$OPTARG ;;
            e) errx=$OPTARG ;;
            o) outx=$OPTARG ;;
            i) inx=$OPTARG ;;
            s) split=false ; exclude+== ;;
        esac
    done

    # For some reason completion functions are not invoked at all by
    # bash (at least as of 4.1.7) after the command line contains an
    # ampersand so we don't get a chance to deal with redirections
    # containing them, but if we did, hopefully the below would also
    # do the right thing with them...

    COMPREPLY=()
    local redir="@(?([0-9])<|?([0-9&])>?(>)|>&)"
    _get_comp_words_by_ref -n "$exclude<>&" cur prev words cword

    # Complete variable names.
    _variables && return 1


    # Complete on files if current is a redirect possibly followed by a
    # filename, e.g. ">foo", or previous is a "bare" redirect, e.g. ">".
    if [[ $cur == $redir* || $prev == $redir ]]; then
        local xspec
        case $cur in
            2'>'*) xspec=$errx ;;
            *'>'*) xspec=$outx ;;
            *'<'*) xspec=$inx ;;
            *)
                case $prev in
                    2'>'*) xspec=$errx ;;
                    *'>'*) xspec=$outx ;;
                    *'<'*) xspec=$inx ;;
                esac
                ;;
        esac
        cur="${cur##$redir}"
        _filedir $xspec
        return 1
    fi

    # Remove all redirections so completions don't have to deal with them.
    local i skip
    for (( i=1; i < ${#words[@]}; )); do
        if [[ ${words[i]} == $redir* ]]; then
            # If "bare" redirect, remove also the next word (skip=2).
            [[ ${words[i]} == $redir ]] && skip=2 || skip=1
            words=( "${words[@]:0:i}" "${words[@]:i+skip}" )
            [[ $i -le $cword ]] && (( cword -= skip ))
        else
            (( i++ ))
        fi
    done

    [[ $cword -le 0 ]] && return 1

    prev=${words[cword-1]}

    [[ ${split-} ]] && _split_longopt && split=true

    return 0
}

_tilde()
{
    local result=0
    if [[ $1 == \~* && $1 != */* ]]; then
        # Try generate ~username completions
        COMPREPLY=( $(compgen -P '~' -u -- "${1#\~}") )
        result=${#COMPREPLY[@]}
        # 2>/dev/null for direct invocation, e.g. in the _tilde unit test
        [[ $result -gt 0 ]] && compopt -o filenames 2>/dev/null
    fi
    return $result
}


#########################################################
shopt -s extglob progcomp
_ntg()
{

    local cur prev words cword
    _init_completion || return

    local python_version=$(python3 --version 2>/dev/null | /usr/bin/grep -oP ' \K.*' | /usr/bin/cut -f1,2 -d '.')
    local gns3_version=$(/usr/bin/grep -oP '__version__ = \K.*' "/usr/share/gns3/gns3-gui/lib/python$python_version/site-packages/gns3/version.py" 2>/dev/null | /usr/bin/sed 's/"//g' | /usr/bin/cut -f1,2 -d '.')
    local sourceconfig=~/".config/GNS3/$gns3_version/gns3_controller.conf" command=${words[1]}

    local GENERIC_OPTIONS='
        -h --help
    '

    # see if the user selected a command already
    local COMMANDS=(
        "all"
        "topology"
        "config"
        )

    local matches=" (-h|--help|-v|--version) "

    if [[ ${words[@]} =~ $matches ]]; then
        return 0
    fi

    # supported options per command
    if [[ "$cur" == -* ]] && [[ -n $command ]]; then
        case $command in
            all|topology)

                local reply=''

                local matches=" -(i|-image) "
                if [[ ! ${words[@]} =~ $matches ]]; then
                    reply="-i --image"
                fi

                local matches=" -(n|-name) "
                if [[ ! ${words[@]} =~ $matches ]]; then
                    reply="$reply -n --name"
                fi

                local matches=" -(t|-template|r|-read) "
                if [[ ! ${words[@]} =~ $matches ]]; then
                    reply="$reply -t --template"
                fi

                local matches=" -(r|-read|t|-template) "
                if [[ ! ${words[@]} =~ $matches ]]; then
                    reply="$reply -r --read"
                fi

                local matches=" -(o|-output) "
                if [[ ! ${words[@]} =~ $matches ]]; then
                    reply="$reply -o --output"
                fi

                if [[ $cword == 2 ]]; then
                    reply="$reply $GENERIC_OPTIONS"
                fi

                COMPREPLY=( $( compgen -W '
                  $reply' -- "$cur" ) )
                return 0
                ;;

            config)

                if [[ $cword == 2 ]]; then
                    COMPREPLY=( $( compgen -W '
                    '"$GENERIC_OPTIONS" -- "$cur" ) )
                fi
                return 0
                ;;
        esac
    fi

    # specific options of coomands arguments
    local matches="\b(all|topology)\b"

    if [[ -n $prev ]] && [[ -n $command ]] && [[ $command =~ $matches ]]; then
        case $prev in
            --image|-!(-*)i)

                local i read_config args_gns3_controller matches="^-(r|-read)$"

                for (( i=1; i < ${#words[@]}-1; i++ )); do
                    if [[ ${words[i]} =~ $matches ]]; then
                        args_gns3_controller=${words[$((i+1))]}
                        break
                    fi
                done

                if [[ -n $args_gns3_controller ]]; then
                    read_config=${args_gns3_controller//\~/$HOME}
                else
                    read_config=$sourceconfig
                fi

                local images=$(/usr/bin/jq -r '.templates[] | select(.template_type=="docker") | .image' $read_config  2>/dev/null |\
                    /usr/bin/sed -r '/^.+?\/*.+?:.+$/!d')

                if [[ -n $images ]] && [[ $images != "null" ]]; then
                    COMPREPLY=( $( compgen -W '
                        $images' -- "$cur" ) )
                fi
                return 0
                ;;

            --name|--read|-!(-*)[nr])
                _filedir
                return 0
                ;;

            --template|-!(-*)t)

               local template_id=$(/usr/bin/jq -r '.templates[] | select(.template_type=="docker") | .template_id' $sourceconfig  2>/dev/null |\
                    /usr/bin/sed -r '/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/!d'  )

                if [[ -n $template_id ]] && [[ $template_id != "null" ]]; then
                    COMPREPLY=( $( compgen -W '
                        $template_id' -- "$cur" ) )

                fi

                return 0
                ;;

            -o|--output)
                _filedir -d
            return 0
            ;;
        esac
    fi


    # specific command arguments
    if [[ -n $command ]]; then
        case $command in
            all|topology)
                if [[ $((cword % 2)) == 0 ]]; then
                    _filedir "nkp"
                fi

                return 0
                ;;
            config)

                if [[ $cword == 2 ]]; then
                    _filedir "nkp"
                fi
                
                if [[ $cword == 3  ]]; then
                    _filedir "gns3"
                fi
                
                return 0
                ;;
        esac

    fi

    local matches="\b(all|topology|config)\b|-"
    # no command yet, show what commands we have
    if [[ "$cur" != -* ]] && [[ $cword == 1 ]]; then
        COMPREPLY=( $( compgen -W '${COMMANDS[@]}' -- "$cur" ) )
    elif [[ $command =~ $matches ]]; then
        COMPREPLY=( $( compgen -W '-v --version${GENERIC_OPTIONS}' -- "$cur" ) )
    fi

    return 0
} &&
complete -F _ntg ntg

# ex: ts=4 sw=5 et filetype=sh
