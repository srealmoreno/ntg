#!/bin/bash
#########################################################################
#
# Copyright (C) 2020 Salvador Real.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################
# This script initializes the network interfaces, executes the file
# $(hostname).startup and copies essetianls files to "/etc/"

# If the "/root" directory is persistent, when starting the node the files do
# not load correctly. You have to reload with "cd"
[[ "$GNS3_VOLUMES" =~ "/root" ]] && cd $PWD

# Since there are no persistent files nor can the "/etc" folder be set as
# persistent, you have to copy them to another directory and when the node
# starts move them to "/etc/"
# action before: is an action before the routine
# action after: is an action after the routine
# routines are done by files
# for example, the "sysctl.conf" file, your routine is to delete
# the original file, create a symbolic link and run sysctl -p after the routine
# the "hosts" file contains only IPv6 as GNS3 does not support IPv6 in
# "additional hosts", your routine is to add the IPv6 in the original file

blackListDir=~/"blackListDir"
preventCache="/tmp/.initialized.lock"
routines() {
    local action=""
    local action_before=""
    local action_after=""
    local verbose="True"

    local just_once="False"
    # If the node is rebooted, GNS3 keeps a cache of some files. (This cache is freed when the entire project is closed)
    # If you want them to strictly only run the first time it is run start the node set this variable to true
    # For example with the '/etc/hosts' file it should only be executed strictly once since GNS3 caches its state

    local original="${1/$blackListDir/}"
    local originalFile="${original##*/}"
    local originalDir="${original%/*}"

    case "$original" in
    /etc/hosts)
        just_once="True"

        action_before="echo '# IPV6_EXTRA_HOSTS_START' >> /etc/hosts"
        action="append"
        action_after="echo '# IPV6_EXTRA_HOSTS_END' >> /etc/hosts"

        #if [[ -n $IPv6_Hosts ]]; then
        #    action="append"
        #    unset IPv6_Hosts
        #else
        #    action="nothing"
        #fi
        ;;

    /etc/sysctl.conf)
        action="link"
        action_after="sysctl -p"

        #if [[ -n $sysctl_conf ]]; then
        #    action="link"
        #    unset sysctl_conf
        #    action_after="sysctl -p"
        #else
        #    action="nothing"
        #fi

        ;;
    *)
        action="link"
        ;;
    esac

    if [ "$just_once" == "True" ] && [ -e "$preventCache" ]; then
        return
    fi

    mkdir -p "$originalDir"

    if [[ -n $action_before ]]; then
        if [ "$verbose" == "False" ]; then
            echo "$action_before" | bash
        else
            echo "$action_before" | bash >/dev/null 2>&1
        fi
    fi

    case $action in
    link)
        if [ "$verbose" == "False" ]; then
            rm -f "$original"
            ln -s "$1" "$original"
        else
            rm -f "$original" >/dev/null 2>&1
            ln -s "$1" "$original" /etc/ >/dev/null 2>&1
        fi
        ;;
    append)
        if [ "$verbose" == "False" ]; then
            cat "$1" >>"$original"
        else
            cat "$1" >>"$original" 2>/dev/null
        fi
        ;;
    esac

    if [[ -n $action_after ]]; then
        if [ "$verbose" == "False" ]; then
            echo "$action_after" | bash
        else
            echo "$action_after" | bash >/dev/null 2>&1
        fi
    fi
}

if [[ ! -n $INITIALIZED ]]; then
    # GNS3 has a script that initializes the network interfaces but it is only
    # compatible with IPv4, it can also have errors if you execute any
    # routine ("pre-up" "post-up" "down" "pre-down" "post-down", "down")
    # since the binaries it uses are too old.
    # The best thing would be to comment on the GNS3 code lines that
    # initialize the interfaces but just in case, with this I free them.
    ls /sys/class/net/ | while read dev; do
        #grep -qP '^\s*auto\s+'$dev /etc/network/interfaces 2>/dev/null && ifdown $dev >/dev/null 2>&1
        ifdown $dev >/dev/null 2>&1
        ip addr flush $dev 2>/dev/null
        ip link set $dev down >/dev/null 2>&1
    done

    if [ -d ~/blackListDir ]; then
        find ~/blackListDir -type f | while read -r file; do
            routines "$file"
        done
        if [ ! -e "$preventCache" ]; then
            sed  -i "1i #\tFile generated by initialization scripts\n# Don't edit this file manually if you want the changes to be persistent.\n# How to add hosts:\n#  IPv4: add it in 'Extra Hosts' found in the advanced node settings in GNS3\n#  IPv6: add it in '/root/blackListDir/etc/hosts' (if the file or folder does not exist, create them)" /etc/hosts
            mkfifo /tmp/.initialized.lock
        fi
    fi

    # Following the netgui standard with the initialization file,
    # if it exists execute it
    if [ -f ~/$(hostname).startup ]; then
        bash ~/$(hostname).startup
    fi

    # Initializes only the network interfaces that are defined
    # in the file "/etc/network/interfaces"
    # If the initialization file ($ hostname.startup) already
    # starts the network interface, it is ignored.
    # The ifup command reads the configuration from the file "/etc/network/interfaces"
    grep -oP '^\s*auto\s+\K.+' /etc/network/interfaces | while read dev; do
        if [ $(cat /sys/class/net/$dev/operstate) == "down" ]; then
            ifup $dev
        fi
    done

    # If the interface "lo" has not yet been INITIALIZED, it starts
    if [ $(cat /sys/class/net/lo/operstate) == "down" ]; then
        ip link set lo up
    fi

    export INITIALIZED="True"
fi

# The owner and group of persistent volumes are changed recursively.
# This is to be able to accecss the folders on the host OS at runtime
if [[ -n $GNS3_VOLUMES ]]; then
    sed 's/:/ /g' <<<$GNS3_VOLUMES | xargs chown -R 1000:1000 2>/dev/null
fi
# ex: ts=4 sw=5 et filetype=sh